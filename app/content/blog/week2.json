{
  "publishedAt": "13th May 2023",
  "title": "Architecting 3 Tier Application on AWS VPC with ASG, ELB along Backup plan",
  "content": "AWS S3 or Amazon Simple Storage Service is an object storage service that stores data as objects within buckets. An object is a file and any metadata that describes the file. Apart from data storage functionality, the AWS S3 bucket provides a feature of hosting static websites over it.\n\n We will be creating a simple website and will be hosting on S3 along with that we will be pointing our website URL on Cloudfront as the origin.\n\n Let's create a bucket where we will be uploading our index.html and index.css \n\nSteps:\n\n 1. Create a bucket i.e. 1weekofdevops and unmark Block all public access because we will be hosting web on S3, so the bucket should be publically accessible as shown below.\n\n <img src='/images/uploads/w1i1.jpg'> \n\n 2. Once the bucket is created, go to the permissions tab of that bucket and go below where you will see the option to enable static website hosting. Enable it and in the index document give the file name containing the html code. \n\n <img src='/images/uploads/w1i2.jpg'> \n\n 3. Since your bucket is publically accessible it does not mean your object is also accessible. At the object level, it should also be accessible else it will throw an error in S3 URL. So here we will define the policies at the object level as shown below. \n\n <img src='/images/uploads/w1i3.jpg'> \n\n 4. Now upload your file to your bucket as shown and after uploading your files, click on the S3 URL. You will see your web page deployed. \n\n <img src='/images/uploads/w1i4.jpg'> \n\n <img src='/images/uploads/w1i5.jpg'> \n\n Amazon Cloudfront: \n\n Amazon CloudFront is a content delivery network (CDN) that accelerates the delivery of static and dynamic web content to end users. CloudFront delivers content through a worldwide network of data centers called edge locations. When an end user requests content that youâ€™re serving with CloudFront, the request is routed to the edge location nearest to the end user with the lowest latency. \n\n Steps: \n\n 1. Go the Cloudfront and create a distribution and for the origin, it will automatically pop out the s3 URL when you drop down. Choose that URL \n\n <img src='/images/uploads/w1i6.jpg'> \n\n 2. As we move ahead, we will be creating a pipeline, so that whenever codes change it should directly reflect on our webpage. As Cloudfront uses cache content it might delay in displaying our changed content. So, for this, we will be disabling caching as shown below. \n\n  <img src='/images/uploads/w1i7.jpg'> \n\n 3. In the viewer, section choose the protocol policy and allowed HTTP methods as per your requirement. \n\n  <img src='/images/uploads/w1i8.jpg'> \n\n 4. If you have a domain registered or you own any domain name then we can point out Cloudfront Url to that domain in the CNAME section. \n\n  <img src='/images/uploads/w1i9.jpg'> \n\n 5. You can enable logging that will store the log files of viewers' requests in the S3 bucket. For this, I already created a bucket that will store the logs generated. \n\n <img src='/images/uploads/w1i10.jpg'> \n\n 6. Now keep all things as default and click on Create a distribution. Once it is created you will get the Distribution domain name. Copy and paste it into your browser. Your website is up and running. \n\n <img src='/images/uploads/w1i11.jpg'> \n\n AWS CodePipeline: \n\n AWS CodePipeline is a continuous integration and continuous delivery service for fast and reliable application and infrastructure updates. You can use CodePipeline to fully model and automate your software release processes. \n\n AWS CodePipeline can pull source code for your pipeline directly from AWS CodeCommit, GitHub, Amazon ECR, or Amazon S3. It can run builds and unit tests in AWS CodeBuild. CodePipeline can deploy your changes using AWS CodeDeploy, AWS Elastic Beanstalk, Amazon Elastic Container Service (Amazon ECS), or AWS Fargate. \n\n Here we will be creating a pipeline to integrate with my GitHub repos where my codes are and whenever someone commits changes the pipeline should automatically trigger. \n\n Steps: \n\n 1. Go to AWS Pipeline, click on create pipeline, name your pipeline and click on Next. \n\n <img src='/images/uploads/w1i12.jpg'> \n\n 2. In the Source section, you can choose your repository. For me, I have uploaded it on GitHub so I will be linking Github repo here. \n\n <img src='/images/uploads/w1i13.jpg'> \n\n 3. You can skip the build section as we are not building any artifacts. \n\n <img src='/images/uploads/w1i14.jpg'> \n\n 4. In the Deploy Provider section, give the bucket name where your code files are and whenever changes apply, it should upload the changed files. Check extract files before deploy option as we don't want jar files to be uploaded. \n\n <img src='/images/uploads/w1i14.jpg'> \n\n 5. Click on Next and Your pipeline is created. You make some changes to your source code and push it to repo. CodePipeline will automatically detect it and trigger the pipeline. \n\n <img src='/images/uploads/w1i15.jpg'> \n\n  5. Click on Next and Your pipeline is created. You make some changes to your source code and push it to repo. CodePipeline will automatically detect it and trigger the pipeline. \n\n <img src='/images/uploads/w1i16.jpg'> \n\n Note: the URLs you obtained here are AWS-specific. If you own your domain, then you can use AWS Route 53 to redirect CloudFront or S3 URLs to your domain. \n\n AWS ROUTE 53 \n\n Amazon Route 53 is a highly available and scalable Domain Name System (DNS) web service. Route 53 connects user requests to internet applications running on AWS or on-premises. \n\n Steps: \n\n 1. Go to Route 53 and click on Create Hosted Zone. \n\n <img src='/images/uploads/w1i17.jpg'> \n\n 2. If you own any domain then enter your domain name. \n\n 3. Now we will create the A records to send requests Cloudfront URL. Check the Alias button and under Route traffic to choose Alias to CloudFront Distribution. \n\n <img src='/images/uploads/w1i18.jpg'> \n\n Here we go, you have redirected your domain to CloudFront URL. \n\n Viola \n\n #10weeksofcloudops \n\n References: \n\n https://docs.aws.amazon.com/AmazonS3/latest/userguide/website-hosting-cloudfront-walkthrough.html#create-distribution \n\n https://docs.aws.amazon.com/AmazonS3/latest/userguide/HostingWebsiteOnS3Setup.html \n\n https://devopswithgopal.hashnode.dev/hosting-static-website-on-s3-and-cloudfront-and-creating-cicd-pipeline \n\n",
  "featuredImage": "/images/uploads/week1.jpg"
}
